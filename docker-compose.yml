version: '3.8'

services:
  # Base de donn√©es PostgreSQL
  postgres:
    image: postgres:15
    container_name: corporate_os_postgres
    environment:
      POSTGRES_DB: corporate_os
      POSTGRES_USER: corporate_user
      POSTGRES_PASSWORD: corporate_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - corporate_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U corporate_user -d corporate_os"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Keycloak pour l'authentification
  keycloak:
    build: ./keycloak
    container_name: corporate_os_keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: corporate_user
      KC_DB_PASSWORD: corporate_password
      KC_HTTP_ENABLED: true
    command: ["start"]
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - corporate_network
    healthcheck:
      test: ["CMD", "/opt/keycloak/bin/kc.sh", "show-config"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Application FastAPI
  app:
    build:
      context: ./app
      dockerfile: Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
    container_name: corporate_os_app
    environment:
      DATABASE_URL: postgresql://corporate_user:corporate_password@postgres:5432/corporate_os
      KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAK_REALM: corporate-os
      KEYCLOAK_CLIENT_ID: corporate-os-client
      SECRET_KEY: your-secret-key-here
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - corporate_network
    volumes:
      - ./app:/app/app
      - ./certificates:/app/certificates
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management
    container_name: corporate_os_rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - corporate_network

volumes:
  postgres_data:

networks:
  corporate_network:
    driver: bridge
name: CI/CD Pipeline - Tests Unitaires

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.10'
  POSTGRES_VERSION: '15'
  KEYCLOAK_VERSION: '26.3.1'

jobs:
  code-quality:
    name: Qualité du Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4
      
    - name: Configuration Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache des dépendances
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Installation des dépendances
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black flake8 mypy pytest pytest-cov pytest-asyncio
        
    - name: Formatage du code avec Black
      run: |
        black --check --diff app/ core/ tests/
        
    - name: Linting avec Flake8
      run: |
        flake8 app/ core/ tests/ --max-line-length=88 --extend-ignore=E203,W503
        
    - name: Vérification des types avec MyPy
      run: |
        mypy app/ core/ --ignore-missing-imports --no-strict-optional

  # Job de tests unitaires
  unit-tests:
    name: Tests Unitaires
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: corporate_os_test
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4
      
    - name: Configuration Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache des dépendances
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Installation des dépendances
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock
        
    - name: Configuration de l'environnement de test
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/corporate_os_test" >> .env.test
        echo "KEYCLOAK_URL=http://localhost:8080" >> .env.test
        echo "KEYCLOAK_REALM=corporate-os" >> .env.test
        echo "KEYCLOAK_CLIENT_ID=corporate-os-client" >> .env.test
        echo "KEYCLOAK_CLIENT_SECRET=test-secret" >> .env.test
        echo "SECRET_KEY=test-secret-key" >> .env.test
        echo "DEBUG=true" >> .env.test
        
    - name: Attendre que PostgreSQL soit prêt
      run: |
        while ! pg_isready -h localhost -p 5432 -U postgres; do
          echo "En attente de PostgreSQL..."
          sleep 2
        done
        
    - name: Création de la base de données de test
      run: |
        psql -h localhost -U postgres -d corporate_os_test -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";"
        
    - name: Exécution des tests unitaires
      run: |
        pytest tests/ \
          --cov=app \
          --cov=core \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-fail-under=80 \
          -v \
          --tb=short
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/corporate_os_test
        KEYCLOAK_URL: http://localhost:8080
        KEYCLOAK_REALM: corporate-os
        KEYCLOAK_CLIENT_ID: corporate-os-client
        KEYCLOAK_CLIENT_SECRET: test-secret
        SECRET_KEY: test-secret-key
        DEBUG: true
        
    - name: Upload des rapports de couverture
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-tests:
    name: Tests d'Intégration
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: corporate_os_integration
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4
      
    - name: Configuration Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Installation des dépendances
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-mock httpx
        
    - name: Configuration de l'environnement
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/corporate_os_integration" >> .env.test
        echo "KEYCLOAK_URL=http://localhost:8080" >> .env.test
        echo "KEYCLOAK_REALM=corporate-os" >> .env.test
        echo "KEYCLOAK_CLIENT_ID=corporate-os-client" >> .env.test
        echo "KEYCLOAK_CLIENT_SECRET=test-secret" >> .env.test
        echo "SECRET_KEY=test-secret-key" >> .env.test
        echo "DEBUG=true" >> .env.test
        
    - name: Attendre que PostgreSQL soit prêt
      run: |
        while ! pg_isready -h localhost -p 5432 -U postgres; do
          echo "En attente de PostgreSQL..."
          sleep 2
        done
        
    - name: Exécution des tests d'intégration
      run: |
        pytest tests/test_integration/ \
          -v \
          --tb=short \
          --maxfail=5
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/corporate_os_integration
        KEYCLOAK_URL: http://localhost:8080
        KEYCLOAK_REALM: corporate-os
        KEYCLOAK_CLIENT_ID: corporate-os-client
        KEYCLOAK_CLIENT_SECRET: test-secret
        SECRET_KEY: test-secret-key
        DEBUG: true

  security-tests:
    name: Tests de Sécurité
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4
      
    - name: Configuration Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Installation des dépendances de sécurité
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        
    - name: Analyse de sécurité avec Bandit
      run: |
        bandit -r app/ core/ -f json -o bandit-report.json || true
        
    - name: Vérification des vulnérabilités avec Safety
      run: |
        safety check --json --output safety-report.json || true
        
    - name: Upload des rapports de sécurité
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  performance-tests:
    name: Tests de Performance
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4
      
    - name: Configuration Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Installation des dépendances
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark locust
        
    - name: Exécution des tests de performance
      run: |
        pytest tests/test_performance/ \
          --benchmark-only \
          --benchmark-sort=mean \
          -v
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/corporate_os_test
        KEYCLOAK_URL: http://localhost:8080
        KEYCLOAK_REALM: corporate-os
        KEYCLOAK_CLIENT_ID: corporate-os-client
        KEYCLOAK_CLIENT_SECRET: test-secret
        SECRET_KEY: test-secret-key
        DEBUG: true

  documentation:
    name: Documentation
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4
      
    - name: Configuration Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Installation des dépendances
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pydoc-markdown
        
    - name: Génération de la documentation API
      run: |
        pydoc-markdown --server --open-browser=false
        
    - name: Upload de la documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/


